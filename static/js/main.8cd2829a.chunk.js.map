{"version":3,"sources":["filters/data.ts","filters/checkbox.tsx","filters/filter.tsx","filters/index.tsx","results/bargraph.tsx","utils.js","results/result.tsx","results/index.tsx","AppWrapper.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["data","answers","ageRange","characterGender","class","classComparison","contentInterest","expectedTimeTo60","faction","firstRetailExpansionPlayed","hasActiveSub","hasPlayedPrivateServer","mostRecentExpansionPlayed","prof60","profLeveling","race","region","role","serverType","colors","colorBlindColors","colorsObj","Druid","Hunter","Mage","Paladin","Priest","Rogue","Shaman","Warlock","Warrior","DK","DH","Monk","alt1","alt2","questions","titles","responseDate","Checkbox","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","displayName","startOnSelect","bind","assertThisInitialized","react","className","style","onClick","backgroundColor","isSelected","isColorBlind","answer","e","onSelect","type","React","FilterComp","_this2","_this$props","idx","selectedAnswers","title","Data","map","checkbox_Checkbox","key","toggleAnswer","Filters","height","innerHeight","question","filter_FilterComp","clearFilter","applyFilter","updateColorBlind","transform","BarGraph","getAnswerWidth","value","data-content","concat","width","color","totalAnswers","toFixed","objectEntries","obj","entries","keys","Result","state","counts","_getCountsAsArray","answerCounts","getColor","getChartType","renderBarGraph","renderPieChart","_ref","_ref2","slicedToArray","prevProps","setState","_this3","length","_ref3","borderColor","bargraph_BarGraph","label","labelPosition","labelStyle","fontSize","dist_default","a","labelProps","percent","dataIndex","percentage","textAnchor","alignmentBaseline","dx","dy","fill","x","y","results","filtersLength","activeFilters","computedResponsesLength","allResponsesCount","catIdx","catFilters","filter","questionKey","result_Result","Wrapper","_calcAnswerQuantities","filtering","window","isMobile","innerWidth","loaded","responses","showFilters","_getAnswersTemplate","toggleAnswerFilter","reduce","accum","response","forEach","split","subAnswer","_ref4","q","callback","req","XMLHttpRequest","onFail","event","Error","addEventListener","status","json","JSON","parse","responseText","open","send","getSurveyData","error","failedToLoad","timeoutID","clearTimeout","setTimeout","_this4","_getSurveyResults","_this5","removeEventListener","_this6","filters_Filters","_this7","questionsWithFilters","getFilters","computedResponses","getFilteredResponses","_ref5","_ref6","filteredAnswers","_ref7","_ref8","_ref9","filters","every","_ref11","_ref12","some","selectedAnswer","includes","updatedSection","objectSpread","defineProperty","App","react_default","createElement","AppWrapper_Wrapper","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yVA6FeA,EAAA,CACbC,QAAS,CACPC,SAAU,CAAC,WAAY,UAAW,UAAW,UAAW,UAAW,OACnEC,gBAAiB,CAAC,OAAQ,UAC1BC,MAAO,CACL,SACA,QACA,SACA,UACA,UACA,OACA,UACA,SACA,SAEFC,gBAAiB,CACf,uDACA,wEACA,iEAEFC,gBAAiB,CACf,WACA,WACA,YACA,gBACA,QACA,eACA,kCACA,gBAEFC,iBAAkB,CAChB,WACA,cACA,cACA,eACA,eACA,eACA,aAEFC,QAAS,CAAC,iBAAkB,qBAC5BC,2BAA4B,CAC1B,UACA,sBACA,yBACA,YACA,oBACA,sBACA,SACA,sBAEFC,aAAc,CAAC,MAAO,MACtBC,uBAAwB,CAAC,MAAO,MAChCC,0BAA2B,CACzB,UACA,sBACA,yBACA,YACA,oBACA,sBACA,SACA,sBAEFC,OAAQ,CACN,UACA,gBACA,aACA,cACA,YACA,iBACA,SACA,WACA,aAEFC,aAAc,CACZ,UACA,gBACA,aACA,cACA,YACA,iBACA,SACA,WACA,aAEFC,KAAM,CACJ,QACA,QACA,YACA,QACA,MACA,SACA,SACA,SAEFC,OAAQ,CAAC,WAAY,UAAW,SAAU,QAC1CC,KAAM,CAAC,MAAO,SAAU,QACxBC,WAAY,CAAC,MAAO,MAAO,KAAM,WAEnCC,OA/La,CACb,UACA,UACA,UACA,UACA,UAEA,UACA,UACA,UACA,UACA,UACA,UACA,WAmLAC,iBAhLuB,CACvB,UACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,WAwKAC,UArKgB,CAChBC,MAAO,UACPC,OAAQ,UACRC,KAAM,UACNC,QAAS,UACTC,OAAQ,UACRC,MAAO,UACPC,OAAQ,UACRC,QAAS,UACTC,QAAS,UACTC,GAAI,UACJC,GAAI,UACJC,KAAM,UACNC,KAAM,SACNC,KAAM,kBAwJNC,UArJgB,CAChB,WACA,kBACA,QACA,kBACA,kBACA,mBACA,UACA,6BACA,eACA,yBACA,4BACA,eACA,SACA,OACA,SAEA,OACA,cAoIAC,OAjIa,CACbnC,SAAU,mBACVC,gBAAiB,qCACjBC,MAAO,oCACPC,gB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","file":"static/js/main.8cd2829a.chunk.js","sourcesContent":["const colors = [\n  \"#C0392B\", // dark-red\n  \"#2980B9\", // dark-blue\n  \"#9B59B6\", // dark-purple\n  \"#D35400\", // dark-orange\n  \"#1E8449\", // Dark Green\n  // \"#D4AC0D\", // Lighter Dark Yellow\n  \"#B7950B\", // Dark Yellow\n  \"#D98880\", // light-red\n  \"#7FB3D5\", // light-blue\n  \"#C39BD3\", // light-purple\n  \"#F0B27A\", // light-orange\n  \"#7DCEA0\", // light-green\n  \"#B3B6B7\" // light-grey\n];\n\nconst colorBlindColors = [\n  \"#154360\",\n  \"#1A5276\",\n  \"#1F618D\",\n  \"#1F618D\",\n  \"#2980B9\",\n  \"#5499C7\",\n  \"#5DADE2\",\n  \"#7FB3D5\",\n  \"#85C1E9\"\n];\n\nconst colorsObj = {\n  Druid: \"#FF7D0A\",\n  Hunter: \"#ABD473\",\n  Mage: \"#40C7EB\",\n  Paladin: \"#F58CBA\",\n  Priest: \"#858585\",\n  Rogue: \"#F1C40F\",\n  Shaman: \"#0070DE\",\n  Warlock: \"#8787ED\",\n  Warrior: \"#C79C6E\",\n  DK: \"#C41F3B\",\n  DH: \"#A330C9\",\n  Monk: \"#00FF96\",\n  alt1: \"tomato\",\n  alt2: \"blanchedalmond\"\n};\n\nconst questions = [\n  \"ageRange\",\n  \"characterGender\",\n  \"class\",\n  \"classComparison\",\n  \"contentInterest\",\n  \"expectedTimeTo60\",\n  \"faction\",\n  \"firstRetailExpansionPlayed\",\n  \"hasActiveSub\",\n  \"hasPlayedPrivateServer\",\n  \"mostRecentExpansionPlayed\",\n  \"profLeveling\",\n  \"prof60\",\n  \"race\",\n  \"region\",\n  // \"responseDate\",\n  \"role\",\n  \"serverType\"\n];\n\nconst titles = {\n  ageRange: \"What is your age\",\n  characterGender: \"What gender will your character be\",\n  class: \"What class will your character be\",\n  classComparison:\n    \"Will you roll the same class your previous main, or try a new one\",\n  contentInterest: \"What content are you most excited about\",\n  expectedTimeTo60:\n    \"From the launch of Classic, how long do you anticipate it will take you, in real-world-time, to reach level 60\",\n  faction: \"What faction will your character belong to\",\n  firstRetailExpansionPlayed:\n    \"What is the earliest retail World of Warcraft expansion you played\",\n  hasActiveSub: \"Do you have an active World of Warcraft subscription\",\n  hasPlayedPrivateServer:\n    \"Had you played on a Vanilla WoW private server, prior to Classic's announcement\",\n  mostRecentExpansionPlayed:\n    \"What is the most recent retail World of Warcraft expansion you played?\",\n  profLeveling:\n    \"What primary professions will you be using while leveling from 1-60\",\n  prof60: \"What primary professions will you be using at level 60\",\n  race: \"What race will your character be\",\n  region: \"What region will you be playing on\",\n  responseDate: \"Response Timestamp\",\n  role: \"What will the primary role of your character be\",\n  serverType: \"What type of sever will you be playing on\"\n};\n\nexport default {\n  answers: {\n    ageRange: [\"Under 18\", \"18 - 24\", \"25 - 34\", \"35 - 44\", \"44 - 55\", \"55+\"],\n    characterGender: [\"Male\", \"Female\"],\n    class: [\n      \"Shaman\",\n      \"Rogue\",\n      \"Priest\",\n      \"Warrior\",\n      \"Paladin\",\n      \"Mage\",\n      \"Warlock\",\n      \"Hunter\",\n      \"Druid\"\n    ],\n    classComparison: [\n      \"I will be rolling the same class as my previous main\",\n      \"I will be rolling a class I have played extensively, but did not main\",\n      \"I will be rolling a new class, or one that I played minimally\"\n    ],\n    contentInterest: [\n      \"Questing\",\n      \"Dungeons\",\n      \"World PvP\",\n      \"Battlegrounds\",\n      \"Raids\",\n      \"Role Playing\",\n      \"Collecting items/recipes/wealth\",\n      \"Barrens Chat\"\n    ],\n    expectedTimeTo60: [\n      \"< 1 week\",\n      \"1 - 2 weeks\",\n      \"2 - 4 weeks\",\n      \"1 - 2 months\",\n      \"2 - 4 months\",\n      \"4 - 6 months\",\n      \"6+ months\"\n    ],\n    faction: [\"For the Horde!\", \"For the Alliance!\"],\n    firstRetailExpansionPlayed: [\n      \"Vanilla\",\n      \"The Burning Crusade\",\n      \"Wrath of the Lich King\",\n      \"Cataclysm\",\n      \"Mists of Pandaria\",\n      \"Warlords of Draenor\",\n      \"Legion\",\n      \"Battle for Azeroth\"\n    ],\n    hasActiveSub: [\"Yes\", \"No\"],\n    hasPlayedPrivateServer: [\"Yes\", \"No\"],\n    mostRecentExpansionPlayed: [\n      \"Vanilla\",\n      \"The Burning Crusade\",\n      \"Wrath of the Lich King\",\n      \"Cataclysm\",\n      \"Mists of Pandaria\",\n      \"Warlords of Draenor\",\n      \"Legion\",\n      \"Battle for Azeroth\"\n    ],\n    prof60: [\n      \"Alchemy\",\n      \"Blacksmithing\",\n      \"Enchanting\",\n      \"Engineering\",\n      \"Herbalism\",\n      \"Leatherworking\",\n      \"Mining\",\n      \"Skinning\",\n      \"Tailoring\"\n    ],\n    profLeveling: [\n      \"Alchemy\",\n      \"Blacksmithing\",\n      \"Enchanting\",\n      \"Engineering\",\n      \"Herbalism\",\n      \"Leatherworking\",\n      \"Mining\",\n      \"Skinning\",\n      \"Tailoring\"\n    ],\n    race: [\n      \"Human\",\n      \"Dwarf\",\n      \"Night Elf\",\n      \"Gnome\",\n      \"Orc\",\n      \"Undead\",\n      \"Tauren\",\n      \"Troll\"\n    ],\n    region: [\"Americas\", \"Oceanic\", \"Europe\", \"Asia\"],\n    role: [\"DPS\", \"Healer\", \"Tank\"],\n    serverType: [\"PvP\", \"PvE\", \"RP\", \"RP-PvP\"]\n  },\n  colors,\n  colorBlindColors,\n  colorsObj,\n  questions,\n  titles\n};\n","import * as React from \"react\";\nimport { Survey } from \"../typings\";\n\ninterface Props {\n  answer: string;\n  isSelected?: boolean;\n  isColorBlind: boolean;\n  onSelect: (\n    answer: string,\n    isSelected: boolean,\n    type: keyof Survey.Response\n  ) => void;\n  style?: React.CSSProperties;\n  type: keyof Survey.Response;\n}\n\ninterface State {}\n\nexport default class Checkbox extends React.Component<Props> {\n  public displayName = \"Checkbox\";\n\n  constructor(props: Props) {\n    super(props);\n\n    this.startOnSelect = this.startOnSelect.bind(this);\n  }\n\n  public render() {\n    return (\n      <div className=\"filters-filter-checkbox-cont\" style={this.props.style}>\n        <button\n          className=\"filters-filter-checkbox\"\n          onClick={this.startOnSelect}\n          style={{\n            backgroundColor: this.props.isSelected\n              ? this.props.isColorBlind\n                ? \"#1F618D\"\n                : \"#F1C40F\"\n              : \"transparent\"\n          }}\n        />\n\n        <label\n          className=\"filters-filter-checkbox-answer-text\"\n          role=\"button\"\n          onClick={this.startOnSelect}\n        >\n          {this.props.answer}\n        </label>\n      </div>\n    );\n  }\n\n  startOnSelect(\n    e:\n      | React.SyntheticEvent<HTMLButtonElement>\n      | React.MouseEvent<HTMLLabelElement, MouseEvent>\n  ) {\n    this.props.onSelect(\n      this.props.answer,\n      !!this.props.isSelected,\n      this.props.type\n    );\n  }\n}\n","import * as React from \"react\";\nimport Data from \"./data\";\nimport Checkbox from \"./checkbox\";\nimport { Survey } from \"../typings\";\n\ninterface Props {\n  idx: number;\n  isColorBlind: boolean;\n  selectedAnswers: {\n    [x: string]: boolean;\n  };\n  toggleAnswer: (\n    answer: string,\n    isSelected: boolean,\n    type: keyof Survey.Response\n  ) => void;\n  type: keyof Survey.Response;\n}\n\ninterface State {}\n\nexport default class FilterComp extends React.Component<Props, State> {\n  public displayName = \"FilterComp\";\n\n  constructor(props: Props) {\n    super(props);\n  }\n\n  render() {\n    const { idx, selectedAnswers, type } = this.props;\n    const title = Data.titles[type];\n    const answers = (Data.answers as { [x: string]: string[] })[type];\n\n    return (\n      <div className=\"filters-filter-cont\">\n        <h4 className=\"filters-filter-title\">\n          {idx}. {title}?\n        </h4>\n\n        {answers &&\n          answers.map((answer: string) => (\n            <Checkbox\n              answer={answer}\n              isColorBlind={this.props.isColorBlind}\n              isSelected={!!selectedAnswers[answer]}\n              key={answer}\n              onSelect={this.props.toggleAnswer}\n              type={this.props.type}\n            />\n          ))}\n      </div>\n    );\n  }\n}\n","import * as React from \"react\";\nimport Data from \"./data\";\nimport Filter from \"./filter\";\nimport { FilterTypes, Survey } from \"../typings\";\nimport Checkbox from \"./checkbox\";\n\nimport \"./styles.scss\";\nimport { number } from \"prop-types\";\n\ninterface Props {\n  applyFilter: () => void;\n  clearFilter: () => void;\n  innerHeight: number;\n  isColorBlind: boolean;\n  selectedAnswers: FilterTypes.SelectedAnswers;\n  toggleAnswer: (\n    answer: string,\n    isSelected: boolean,\n    type: keyof Survey.Response\n  ) => void;\n  updateColorBlind: () => void;\n}\n\ninterface State {}\n\nexport default class Filters extends React.Component<Props, State> {\n  public displayName = \"Filters\";\n\n  constructor(props: Props) {\n    super(props);\n  }\n\n  public render() {\n    return (\n      <div\n        className=\"filters-main-cont\"\n        style={{ height: this.props.innerHeight }}\n      >\n        <h2 className=\"filters-title\">Filters</h2>\n\n        <div className=\"filters-filters-cont\">\n          {Data.questions.map((question, idx) => (\n            <Filter\n              idx={idx + 1}\n              isColorBlind={this.props.isColorBlind}\n              key={question}\n              selectedAnswers={\n                this.props.selectedAnswers[\n                  question as keyof FilterTypes.SelectedAnswers\n                ]\n              }\n              type={question as keyof Survey.Response}\n              toggleAnswer={this.props.toggleAnswer}\n            />\n          ))}\n        </div>\n        <div className=\"filter-button-cont\">\n          <button\n            className=\"filter-button-clear\"\n            onClick={this.props.clearFilter}\n          >\n            Clear\n          </button>\n          <button className=\"filter-button\" onClick={this.props.applyFilter}>\n            Apply Filter\n          </button>\n          <Checkbox\n            isSelected={this.props.isColorBlind}\n            isColorBlind={true}\n            answer=\"I'm colorblind\"\n            onSelect={(\n              answer: string,\n              isSelected: boolean,\n              type: keyof Survey.Response\n            ) => this.props.updateColorBlind()}\n            style={{ transform: \"scale(0.7)\" }}\n            type={\"expectedTimeTo60\"}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n","import * as React from \"react\";\n\nimport \"./bargraph.scss\";\n\ninterface Props {\n  answers: { color: string; title: string; value: number }[];\n  totalAnswers: number;\n}\n\ninterface State {}\n\nexport default class BarGraph extends React.Component<Props> {\n  public displayName = \"BarGraph\";\n\n  constructor(props: Props) {\n    super(props);\n\n    this.getAnswerWidth = this.getAnswerWidth.bind(this);\n  }\n\n  public render() {\n    return (\n      <div className=\"bar-graph\">\n        {this.props.answers &&\n          this.props.answers.map(\n            answer =>\n              !!answer.value && (\n                <p\n                  className=\"answer-bar\"\n                  data-content={`${answer.title}: ${\n                    answer.value\n                  } (${this.getAnswerWidth(answer)}%)`}\n                  key={answer.title}\n                  style={{\n                    width: `${this.getAnswerWidth(answer)}%`,\n                    backgroundColor: answer.color\n                  }}\n                />\n              )\n          )}\n        <p className=\"bar-graph-range\">\n          <span>0</span>\n          <span>{this.props.totalAnswers}</span>\n        </p>\n      </div>\n    );\n  }\n\n  getAnswerWidth(answer: { color: string; title: string; value: number }) {\n    return ((answer.value / this.props.totalAnswers) * 100).toFixed(2);\n  }\n}\n","export function getSurveyData(callback) {\n  var req = new XMLHttpRequest();\n\n  req.addEventListener(\"load\", onDataLoaded);\n  req.addEventListener(\"error\", onFail);\n  req.addEventListener(\"abort\", onFail);\n\n  req.open(\n    \"GET\",\n    \"https://aablain.github.io/classic-survey-results/classic-survey-export.json\"\n  );\n  req.send();\n\n  function onDataLoaded(event) {\n    if (req.status >= 400) {\n      onFail(event);\n    } else {\n      var json = JSON.parse(this.responseText);\n      callback(null, json);\n    }\n  }\n\n  function onFail(event) {\n    callback(new Error(\"...\"));\n  }\n}\n\nexport function objectEntries(obj) {\n  return Object.entries\n    ? Object.entries(obj)\n    : Object.keys(obj).map(key => [key, obj[key]]);\n}\n","import * as React from \"react\";\nimport PieChart from \"react-minimal-pie-chart\";\nimport BarGraph from \"./bargraph\";\nimport { objectEntries } from \"../utils\";\nimport Data from \"../filters/data\";\nimport { Survey } from \"../typings\";\n\ninterface Props {\n  idx: number;\n  isColorBlind: boolean;\n  answerCounts: {\n    [x: string]: number;\n  };\n  question: keyof Survey.Response;\n  totalAnswers: number;\n}\n\ninterface State {\n  counts: {\n    title: string;\n    value: number;\n    color: string;\n  }[];\n  countsArr?: [string, number][];\n}\n\nexport default class Result extends React.Component<Props, State> {\n  public displayName = \"Result\";\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      counts: this._getCountsAsArray(props.answerCounts)\n      //   countsArr: this._getCountsAssARrayofArrays(props.answerCounts)\n    };\n\n    this.getColor = this.getColor.bind(this);\n    this.getChartType = this.getChartType.bind(this);\n    this.renderBarGraph = this.renderBarGraph.bind(this);\n    this.renderPieChart = this.renderPieChart.bind(this);\n  }\n\n  _getCountsAsArray(answerCounts: {\n    [x: string]: number;\n  }): {\n    title: string;\n    value: number;\n    color: string;\n  }[] {\n    return (objectEntries(answerCounts) as [string, number][]).map(\n      ([key, value], idx) => ({\n        title: key,\n        value,\n        color: this.getColor(idx, key)\n      })\n    );\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    if (\n      this.props.answerCounts !== prevProps.answerCounts ||\n      this.props.isColorBlind !== prevProps.isColorBlind\n    ) {\n      this.setState({\n        counts: this._getCountsAsArray(this.props.answerCounts)\n      });\n    }\n  }\n\n  public render() {\n    return (\n      <div className=\"result-cont\">\n        <h4 className=\"result-title\">{Data.titles[this.props.question]}?</h4>\n        <div className=\"info-cont\">\n          {this.getChartType() === \"BarChart\"\n            ? this.renderBarGraph()\n            : this.renderPieChart()}\n\n          <ul className=\"stats-list-cont\">\n            {!!this.state.counts.length &&\n              this.state.counts.map(({ color, title, value }) => (\n                <li\n                  className={`result-text${!value ? \" none-match\" : \"\"}`}\n                  key={title}\n                  style={{\n                    color\n                    // textDecoration: !value ? \"line-through\" : \"\"\n                  }}\n                >\n                  <span className=\"result-text-title\">{title}:</span>{\" \"}\n                  <span className=\"result-text-value\">\n                    {value} -{\" \"}\n                    <span\n                      className=\"result-text-value-percentage\"\n                      style={{\n                        borderColor: color\n                        // backgroundColor: color\n                      }}\n                    >\n                      {((value / this.props.totalAnswers) * 100).toFixed(2)}%\n                    </span>\n                  </span>\n                </li>\n              ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n\n  getColor(idx: number, key: string): string {\n    if (this.props.isColorBlind) {\n      return Data.colorBlindColors[idx];\n    }\n\n    return this.props.question === \"class\"\n      ? (Data.colorsObj as { [x: string]: string })[key]\n      : Data.colors[idx];\n  }\n\n  getChartType(): \"PieChart\" | \"BarChart\" {\n    switch (this.props.question) {\n      case \"prof60\":\n      case \"profLeveling\":\n      case \"contentInterest\":\n        return \"BarChart\";\n      default:\n        return \"PieChart\";\n    }\n  }\n\n  renderBarGraph() {\n    return (\n      <BarGraph\n        answers={this.state.counts}\n        totalAnswers={this.props.totalAnswers}\n      />\n    );\n  }\n\n  renderPieChart() {\n    const props = {\n      data: this.state.counts,\n      label: label,\n      labelPosition: 114,\n      labelStyle: {\n        fontSize: \"8x\"\n      }\n    };\n\n    // @ts-ignore\n    return <PieChart {...props} />;\n  }\n}\n\nconst label = (labelProps: {\n  dx: number;\n  dy: number;\n  data: { color: string; percentage: number }[];\n  dataIndex: number;\n  key: string;\n  textAnchor: string;\n  x: number;\n  y: number;\n}) => {\n  const percent = labelProps.data[labelProps.dataIndex].percentage;\n  return (\n    <text\n      className=\"chart-result-percent\"\n      textAnchor={labelProps.textAnchor}\n      alignmentBaseline=\"middle\"\n      dx={labelProps.dx}\n      dy={labelProps.dy}\n      fill={labelProps.data[labelProps.dataIndex].color}\n      key={labelProps.key}\n      x={labelProps.x}\n      y={labelProps.y}\n    >\n      {percent ? `${percent.toFixed(2)}%` : \"\"}\n    </text>\n  );\n};\n","import * as React from \"react\";\nimport Data from \"../filters/data\";\nimport Result from \"./result\";\nimport { FilterTypes, Survey } from \"../typings\";\n\nimport \"./styles.scss\";\nimport data from \"../filters/data\";\n\ninterface Props {\n  activeFilters?: [keyof Survey.Response, Survey.AllAnswers[]][];\n  answerCounts: FilterTypes.AnswersCounts;\n  computedResponsesLength: number;\n  allResponsesCount: number;\n  innerHeight: number;\n  isColorBlind: boolean;\n}\n\nexport default (props: Props) => {\n  const filtersLength = !!props.activeFilters ? props.activeFilters.length : 0;\n\n  return (\n    <div className=\"results-main-cont\" style={{ height: props.innerHeight }}>\n      <h1 className=\"results-title\">Results</h1>\n      <h3 className=\"results-subtitle\">\n        {props.computedResponsesLength} Responses match your filters,\n        Representing{\" \"}\n        {(\n          (props.computedResponsesLength / props.allResponsesCount) *\n          100\n        ).toFixed(2)}\n        % of respondees\n      </h3>\n      {props.activeFilters && !!props.activeFilters.length && (\n        <p>\n          Filtering for{\" \"}\n          {props.activeFilters.map(([category, catFilters], catIdx) => {\n            return (\n              <>\n                <span\n                  style={{\n                    color: props.isColorBlind\n                      ? data.colorBlindColors[catIdx]\n                      : data.colors[catIdx]\n                  }}\n                >\n                  {catIdx + 1}.[\n                  {catFilters.map((filter, idx) =>\n                    !!idx && idx + 1 === catFilters.length\n                      ? ` or ${filter}`\n                      : `${\n                          idx!! && idx + 1 !== catFilters.length ? \", \" : \" \"\n                        }${filter}`\n                  )}{\" \"}\n                  ]\n                </span>{\" \"}\n                {catIdx + 1 !== filtersLength ? \", and \" : \"\"}\n              </>\n            );\n          })}\n        </p>\n      )}\n      <div className=\"results-results-cont\">\n        {Data.questions.map((questionKey, idx) => (\n          <Result\n            idx={idx}\n            isColorBlind={props.isColorBlind}\n            key={questionKey}\n            question={questionKey as keyof Survey.Response}\n            answerCounts={\n              props.answerCounts[questionKey as keyof Survey.Response]\n            }\n            totalAnswers={props.computedResponsesLength}\n          />\n        ))}\n\n        <div className=\"result-cont\" />\n      </div>\n    </div>\n  );\n};\n","import * as React from \"react\";\nimport Filters from \"./filters/\";\nimport Results from \"./results/\";\n// import Responses from \"./db\";\nimport Data from \"./filters/data\";\nimport { FilterTypes, Survey } from \"./typings\";\nimport { getSurveyData, objectEntries } from \"./utils\";\n\ninterface Props {}\n\ninterface State {\n  activeFilters?: [keyof Survey.Response, Survey.AllAnswers[]][];\n  answerCounts: FilterTypes.AnswersCounts;\n  answers: FilterTypes.SelectedAnswers;\n  computedResponsesLength: number;\n  failedToLoad?: boolean;\n  filtering: boolean;\n  innerHeight: number;\n  isMobile: boolean;\n  isColorBlind: boolean;\n  loaded: boolean;\n  responses: Survey.Response[];\n  showFilters: boolean;\n}\n\nexport default class Wrapper extends React.Component<Props, State> {\n  public displayName = \"Wrapper\";\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      answers: {\n        ageRange: {},\n        characterGender: {},\n        class: {},\n        classComparison: {},\n        contentInterest: {},\n        expectedTimeTo60: {},\n        faction: {},\n        firstRetailExpansionPlayed: {},\n        hasActiveSub: {},\n        hasPlayedPrivateServer: {},\n        mostRecentExpansionPlayed: {},\n        prof60: {},\n        profLeveling: {},\n        race: {},\n        region: {},\n        responseDate: {},\n        role: {},\n        serverType: {}\n      },\n      answerCounts: this._calcAnswerQuantities([]),\n      computedResponsesLength: 0,\n      filtering: false,\n      innerHeight: window.innerHeight,\n      isMobile: window.innerWidth < 480,\n      isColorBlind: false,\n      loaded: false,\n      responses: [],\n      showFilters: window.innerWidth > 480\n    };\n\n    this._calcAnswerQuantities = this._calcAnswerQuantities.bind(this);\n    this._getAnswersTemplate = this._getAnswersTemplate.bind(this);\n    this.applyFilter = this.applyFilter.bind(this);\n    this.clearFilter = this.clearFilter.bind(this);\n    this.toggleAnswerFilter = this.toggleAnswerFilter.bind(this);\n  }\n\n  _calcAnswerQuantities(responses: Survey.Response[]) {\n    const answerCounts = responses.reduce((accum, response) => {\n      const respAsArray = objectEntries(response);\n\n      respAsArray.forEach(([questionKey, answer]: string[]) => {\n        if (questionKey === \"responseDate\") {\n          return accum;\n        }\n        if (\n          questionKey === \"prof60\" ||\n          questionKey === \"profLeveling\" ||\n          questionKey === \"contentInterest\"\n        ) {\n          const subAnswers = answer.split(\", \");\n\n          subAnswers.forEach(subAnswer => {\n            if (!accum[questionKey as keyof Survey.Response][subAnswer]) {\n              accum[questionKey as keyof Survey.Response][subAnswer] = 1;\n            } else {\n              accum[questionKey as keyof Survey.Response][subAnswer]++;\n            }\n          });\n        } else {\n          if (!accum[questionKey as keyof Survey.Response][answer]) {\n            accum[questionKey as keyof Survey.Response][answer] = 1;\n          } else {\n            accum[questionKey as keyof Survey.Response][answer]++;\n          }\n        }\n\n        return accum;\n      });\n\n      return accum;\n    }, this._getAnswersTemplate());\n\n    return answerCounts;\n  }\n\n  _getAnswersTemplate() {\n    return objectEntries(Data.answers).reduce(\n      (accum, [q, answers]) => {\n        accum[q as keyof FilterTypes.AnswersCounts] = {};\n        answers.forEach((a: string) => {\n          accum[q as keyof FilterTypes.AnswersCounts][a] = 0;\n        });\n        return accum;\n      },\n      {} as FilterTypes.AnswersCounts\n    );\n  }\n\n  _getSurveyResults() {\n    getSurveyData((error: Error | null, responses: Survey.Response[]) => {\n      if (error) {\n        this.setState({ failedToLoad: true });\n        return;\n      }\n\n      const answerCounts = this._calcAnswerQuantities(responses);\n      this.setState({\n        answerCounts,\n        computedResponsesLength: responses.length,\n        responses,\n        loaded: true\n      });\n    });\n  }\n\n  _setHeight() {\n    // @ts-ignore\n    if (this.timeoutID) {\n      // @ts-ignore\n      clearTimeout(this.timeoutID);\n    }\n\n    // @ts-ignore\n    this.timeoutID = setTimeout(() => {\n      this.setState({ innerHeight: window.innerHeight });\n    }, 300);\n  }\n\n  componentDidMount() {\n    this._getSurveyResults();\n    window.addEventListener(\"resize\", () =>\n      this.setState({ innerHeight: window.innerHeight })\n    );\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", () =>\n      this.setState({ innerHeight: window.innerHeight })\n    );\n  }\n\n  public render() {\n    if (this.state.failedToLoad) {\n      return (\n        <div className=\"main-wrapper\">Survey Results Failed to load :(</div>\n      );\n    }\n\n    if (!this.state.loaded) {\n      return (\n        <div className=\"loading-cont \">\n          <h1 className=\"loading-message\">Loadin' that sweet, sweet data...</h1>\n          <h4 className=\"loading-message-sub\">That means Survey Results</h4>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"main-wrapper\">\n        {this.state.isMobile && (\n          <button\n            className=\"filters-toggle\"\n            onClick={() =>\n              this.setState({ showFilters: !this.state.showFilters })\n            }\n          >\n            {this.state.showFilters ? \"Hide\" : \"Filters\"}\n          </button>\n        )}\n\n        {this.state.showFilters && (\n          <Filters\n            applyFilter={this.applyFilter}\n            clearFilter={this.clearFilter}\n            innerHeight={this.state.innerHeight}\n            isColorBlind={this.state.isColorBlind}\n            selectedAnswers={this.state.answers}\n            toggleAnswer={this.toggleAnswerFilter}\n            updateColorBlind={() =>\n              this.setState({ isColorBlind: !this.state.isColorBlind })\n            }\n          />\n        )}\n\n        {this.state.answerCounts && (\n          <Results\n            answerCounts={this.state.answerCounts}\n            activeFilters={this.state.activeFilters}\n            computedResponsesLength={this.state.computedResponsesLength}\n            allResponsesCount={this.state.responses.length}\n            innerHeight={this.state.innerHeight}\n            isColorBlind={this.state.isColorBlind}\n          />\n        )}\n      </div>\n    );\n  }\n\n  applyFilter() {\n    this.setState({ filtering: true }, () => {\n      const { answers } = this.state;\n      const questionsWithFilters = this.getFilters(answers);\n\n      if (!questionsWithFilters.length) {\n        return this.setState({\n          activeFilters: [],\n          filtering: false,\n          answerCounts: this._calcAnswerQuantities(this.state\n            .responses as Survey.Response[]),\n          computedResponsesLength: (this.state.responses as Survey.Response[])\n            .length\n        });\n      }\n\n      const computedResponses = this.getFilteredResponses(\n        (this.state.responses as Survey.Response[]) || [],\n        questionsWithFilters\n      );\n      const answerCounts = this._calcAnswerQuantities(computedResponses);\n\n      this.setState({\n        activeFilters: questionsWithFilters,\n        answerCounts,\n        filtering: false,\n        computedResponsesLength: computedResponses.length\n      });\n    });\n  }\n\n  clearFilter() {\n    this.setState({\n      answers: {\n        ageRange: {},\n        characterGender: {},\n        class: {},\n        classComparison: {},\n        contentInterest: {},\n        expectedTimeTo60: {},\n        faction: {},\n        firstRetailExpansionPlayed: {},\n        hasActiveSub: {},\n        hasPlayedPrivateServer: {},\n        mostRecentExpansionPlayed: {},\n        prof60: {},\n        profLeveling: {},\n        race: {},\n        region: {},\n        responseDate: {},\n        role: {},\n        serverType: {}\n      }\n    });\n  }\n\n  getFilters(\n    answers: FilterTypes.SelectedAnswers\n  ): [keyof Survey.Response, Survey.AllAnswers[]][] {\n    return objectEntries(answers).reduce(\n      (accum, [questionKey, selectedAnswers]) => {\n        const filteredAnswers = objectEntries(selectedAnswers as {\n          [x: string]: boolean;\n        })\n          .filter(([__, isSelected]) => isSelected)\n          .map(([answer]) => answer);\n\n        if (filteredAnswers.length) {\n          // @ts-ignore\n          return accum.concat([[questionKey, filteredAnswers]]);\n        }\n\n        return accum;\n      },\n      []\n    );\n  }\n\n  getFilteredResponses(\n    responses: Survey.Response[],\n    filters: [keyof Survey.Response, Survey.AllAnswers[]][]\n  ) {\n    return responses.filter(response => {\n      return filters.every(([questionKey, selectedAnswers]) => {\n        return (selectedAnswers as string[]).some(selectedAnswer => {\n          if (\n            questionKey === \"contentInterest\" ||\n            questionKey === \"prof60\" ||\n            questionKey === \"profLeveling\"\n          ) {\n            // @ts-ignore\n            return response[questionKey].includes(selectedAnswer);\n          }\n\n          return response[questionKey] === selectedAnswer;\n        });\n      });\n    });\n  }\n\n  toggleAnswerFilter(\n    answer: string,\n    isSelected: boolean,\n    type: keyof Survey.Response\n  ) {\n    const updatedSection = {\n      ...this.state.answers[type],\n      [answer]: !isSelected\n    };\n\n    this.setState({\n      answers: { ...this.state.answers, [type]: updatedSection }\n    });\n  }\n}\n","import React, { Component } from \"react\";\nimport AppWrapper from \"./AppWrapper\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        {/* <header className=\"App-header\"> */}\n        {/* <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.tsx</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a> */}\n        {/* </header> */}\n        <AppWrapper />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}